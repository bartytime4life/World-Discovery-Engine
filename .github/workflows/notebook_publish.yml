name: Publish Notebooks (HTML) — Ultimate

on:
  push:
    branches: ["**"]
    paths:
      - "notebooks/**/*.ipynb"
      - ".github/workflows/notebook_publish.yml"
  workflow_dispatch:
    inputs:
      execute:
        description: "Execute notebooks before converting?"
        type: choice
        options: ["true", "false"]
        default: "false"
        required: true
      timeout:
        description: "Execution timeout per notebook (seconds)"
        type: number
        default: 1200
        required: true
      clean:
        description: "Also emit a 'clean' HTML (no code cells) version?"
        type: choice
        options: ["true", "false"]
        default: "true"
        required: true
      mathjax:
        description: "Embed MathJax support?"
        type: choice
        options: ["true", "false"]
        default: "true"
        required: true
      deploy_pages:
        description: "Publish to GitHub Pages?"
        type: choice
        options: ["auto (default branch only)","always","never"]
        default: "auto (default branch only)"
        required: true

concurrency:
  group: notebooks-html-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read
  pages: write
  id-token: write

env:
  PYTHON_VERSION: "3.11"
  DEFAULT_TIMEOUT: "1200"
  DEFAULT_EXECUTE: "false"
  DEFAULT_CLEAN: "true"
  DEFAULT_MATHJAX: "true"

jobs:
  discover:
    name: Discover Notebooks
    runs-on: ubuntu-latest
    outputs:
      notebooks_json: ${{ steps.find.outputs.notebooks_json }}
      count: ${{ steps.find.outputs.count }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine changed or all notebooks
        id: find
        shell: bash
        run: |
          set -euo pipefail
          shopt -s globstar nullglob
          # Prefer changed notebooks in the push; fallback to all in notebooks/
          if [ "${{ github.event_name }}" = "push" ] && [ -n "${{ github.event.before }}" ] && [ -n "${{ github.sha }}" ]; then
            changed=()
            while IFS= read -r f; do
              [[ "$f" == notebooks/*.ipynb || "$f" == notebooks/**/*.ipynb ]] && changed+=("$f")
            done < <(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
            if [ ${#changed[@]} -gt 0 ]; then
              mapfile -t NB < <(printf '%s\n' "${changed[@]}" | sort -u)
            fi
          fi
          if [ ${#NB[@]:-0} -eq 0 ]; then
            mapfile -t NB < <(printf '%s\n' notebooks/**/*.ipynb notebooks/*.ipynb | tr ' ' '\n' | sed '/^\s*$/d' | sort -u)
          fi

          if [ ${#NB[@]} -eq 0 ]; then
            echo "No notebooks to process."
            echo "notebooks_json=[]" >> "$GITHUB_OUTPUT"
            echo "count=0" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Emit JSON array for matrix
          python - <<'PY'
          import json, os
          nbs = os.environ.get("NB_LIST","").splitlines()
          print(f"notebooks_json={json.dumps(nbs)}")
          print(f"count={len(nbs)}")
          PY \
          | tee /dev/stderr \
          | sed 's/^/::set-output name=UNUSED::/g' >/dev/null 2>&1 || true

          NB_JSON=$(printf '%s\n' "${NB[@]}" | python - <<'PY'
          import json,sys
          arr=[l.strip() for l in sys.stdin if l.strip()]
          print(json.dumps(arr))
          PY)
          echo "notebooks_json=$NB_JSON" >> "$GITHUB_OUTPUT"
          echo "count=${#NB[@]}" >> "$GITHUB_OUTPUT"
        env:
          NB_LIST: ${{ steps.find.outputs.notebooks_json }}

  render:
    name: Render (${{ matrix.nb }})
    runs-on: ubuntu-latest
    needs: discover
    if: needs.discover.outputs.count != '0'
    strategy:
      fail-fast: false
      matrix:
        nb: ${{ fromJson(needs.discover.outputs.notebooks_json) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install minimal conversion stack
        run: |
          python -m pip install --upgrade pip
          pip install nbconvert nbclient jupyterlab_pygments pygments nbformat jinja2

      - name: Optional: install project deps for execution (best-effort)
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.execute == 'true' || env.DEFAULT_EXECUTE == 'true' }}
        run: |
          if [ -f requirements.txt ]; then pip install -r requirements.txt || true; fi
          if [ -f pyproject.toml ]; then pip install . || true; fi

      - name: Normalize config
        id: cfg
        run: |
          ex="${{ github.event_name == 'workflow_dispatch' && inputs.execute || env.DEFAULT_EXECUTE }}"
          to="${{ github.event_name == 'workflow_dispatch' && inputs.timeout || env.DEFAULT_TIMEOUT }}"
          cl="${{ github.event_name == 'workflow_dispatch' && inputs.clean || env.DEFAULT_CLEAN }}"
          mj="${{ github.event_name == 'workflow_dispatch' && inputs.mathjax || env.DEFAULT_MATHJAX }}"
          echo "execute=$ex"   >> "$GITHUB_OUTPUT"
          echo "timeout=$to"   >> "$GITHUB_OUTPUT"
          echo "clean=$cl"     >> "$GITHUB_OUTPUT"
          echo "mathjax=$mj"   >> "$GITHUB_OUTPUT"

      - name: Convert to HTML
        id: convert
        shell: bash
        run: |
          set -euo pipefail
          NB="${{ matrix.nb }}"
          echo "Converting: $NB"
          outdir="artifacts/html/$(dirname "$NB")"
          mkdir -p "$outdir" site/$(dirname "$NB")

          EXTRA_ARGS=()
          if [ "${{ steps.cfg.outputs.execute }}" = "true" ]; then
            EXTRA_ARGS+=(--execute --ExecutePreprocessor.timeout=${{ steps.cfg.outputs.timeout }})
          fi

          # MathJax embed (nbconvert auto-loads by default; ensure enabled/disabled)
          if [ "${{ steps.cfg.outputs.mathjax }}" != "true" ]; then
            EXTRA_ARGS+=(--HTMLExporter.exclude_output_prompt=True)
          fi

          # 1) Full HTML (with inputs/outputs)
          jupyter nbconvert \
            --to html \
            --output-dir "$outdir" \
            "${EXTRA_ARGS[@]}" \
            "$NB"

          # 2) Clean HTML (no code cells) — optional
          if [ "${{ steps.cfg.outputs.clean }}" = "true" ]; then
            jupyter nbconvert \
              --to html \
              --output-dir "$outdir" \
              --TemplateExporter.exclude_input=True \
              --HTMLExporter.exclude_input=True \
              --HTMLExporter.exclude_output_prompt=True \
              "${EXTRA_ARGS[@]}" \
              "$NB" \
              --output "$(basename "$NB" .ipynb).clean.html"
          fi

          # Copy into site/ preserving directory structure
          cp -a "$outdir"/* "site/$(dirname "$NB")/"

      - name: Coordinate redaction guard (optional)
        # Fail if notebooks rendered outputs include high-precision coordinates
        shell: bash
        run: |
          set -euo pipefail
          shopt -s nullglob globstar
          if grep -RIEn '[+-]?[0-9]{1,3}\.[0-9]{6,}' site || true; then
            echo "High-precision coordinates detected in rendered HTML. Please round/redact before publishing." >&2
            exit 1
          fi

      - name: Upload per-notebook artifact
        uses: actions/upload-artifact@v4
        with:
          name: notebooks-html-${{ matrix.nb }}
          path: |
            artifacts/html
            site

  index:
    name: Build Index & Upload
    runs-on: ubuntu-latest
    needs: render
    if: always()
    steps:
      - name: Download all HTML artifacts
        uses: actions/download-artifact@v4
        with:
          path: _dl

      - name: Assemble site/ and create index.html
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p site
          # Merge all 'site' folders from parallel jobs
          find _dl -type d -name site -exec rsync -a {}/* site/ \; || true

          # Create a simple index listing all HTML files
          {
            echo "<!DOCTYPE html><html><head><meta charset='utf-8'><title>Notebooks</title>"
            echo "<style>body{font-family:system-ui,Segoe UI,Arial,sans-serif;padding:2rem;max-width:960px;margin:auto} ul{line-height:1.6}</style>"
            echo "</head><body><h1>Rendered Notebooks</h1><ul>"
            find site -type f -name "*.html" | sort | sed "s|^site/||" | while read -r f; do
              echo "<li><a href=\"./$f\">$f</a></li>"
            done
            echo "</ul></body></html>"
          } > site/index.html

      - name: Upload notebooks site artifact
        uses: actions/upload-artifact@v4
        with:
          name: notebooks-html-site
          path: site

  pages:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: index
    if: >
      (github.event_name == 'workflow_dispatch' && inputs.deploy_pages == 'always') ||
      (github.event_name == 'workflow_dispatch' && inputs.deploy_pages == 'auto (default branch only)' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)) ||
      (github.event_name == 'push' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch))
    steps:
      - name: Download site artifact
        uses: actions/download-artifact@v4
        with:
          name: notebooks-html-site
          path: site

      - name: Configure Pages
        uses: actions/configure-pages@v5

      - name: Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

      - name: Deploy to Pages
        id: deployment
        uses: actions/deploy-pages@v4