# FILE: .pre-commit-config.yaml
# -------------------------------------------------------------------------------------------------
# World Discovery Engine (WDE) â€” Pre-commit configuration
# Goals:
#  - Fast, reliable feedback for contributors
#  - Consistent style (Black + Ruff + isort) across code & notebooks (via nbQA)
#  - Safety checks (secrets, large files, security linting, Dockerfile/Shell lint)
#  - Reproducibility hygiene (YAML/TOML/JSON validity, pyproject validation)
#  - Optional pre-push gates for tests and DVC hygiene
#
# Notes:
#  - Keep hooks fast for pre-commit; run heavier checks in CI or pre-push stage
#  - Exclude large/generated dirs: data/, outputs/, artifacts/, .dvc/cache/, node_modules/
#  - Default Python: 3.11 (match pyproject toolchain)

minimum_pre_commit_version: "3.5.0"

default_language_version:
  python: python3.11

ci:
  autofix_prs: true
  autoupdate_schedule: monthly

# Global excludes for generated or external content
exclude: >
  (?x)^(
    data/|
    outputs/|
    artifacts/|
    .dvc/cache/|
    .dvc/tmp/|
    node_modules/|
    .*\.ipynb_checkpoints/|
    .*/__pycache__/|
    .*\.lock$|
    .*\.min\.(js|css)$
  )

repos:
  # -----------------------------
  # Python formatting & linting
  # -----------------------------
  - repo: https://github.com/psf/black
    rev: 24.8.0
    hooks:
      - id: black
        name: black (py)
        args: ["--line-length=100"]
        additional_dependencies: ["click<8.1.0"]  # stability on some systems

  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.6.9
    hooks:
      - id: ruff
        name: ruff (py lint)
        args: ["--fix", "--line-length=100"]
      - id: ruff-format
        name: ruff-format (py)

  - repo: https://github.com/PyCQA/isort
    rev: 5.13.2
    hooks:
      - id: isort
        name: isort (imports)
        args: ["--profile=black", "--filter-files"]

  # nbQA to apply Black/Ruff to notebooks (.ipynb)
  - repo: https://github.com/nbQA-dev/nbQA
    rev: 1.9.0
    hooks:
      - id: nbqa-black
        name: nbqa-black (notebooks)
        args: ["--line-length=100"]
        additional_dependencies: ["black==24.8.0"]
        files: "\\.ipynb$"
      - id: nbqa-ruff
        name: nbqa-ruff (notebooks)
        args: ["--fix", "--line-length=100"]
        additional_dependencies: ["ruff==0.6.9"]
        files: "\\.ipynb$"

  # Strip outputs from notebooks to keep diffs readable
  - repo: https://github.com/kynan/nbstripout
    rev: 0.7.1
    hooks:
      - id: nbstripout
        name: nbstripout (clean notebooks)
        args: ["--drop-empty-cells"]
        files: "\\.ipynb$"

  # -----------------------------------
  # Core hygiene & file integrity
  # -----------------------------------
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.6.0
    hooks:
      - id: end-of-file-fixer
      - id: trailing-whitespace
      - id: check-yaml
      - id: check-toml
      - id: check-json
      - id: pretty-format-json
        args: ["--autofix", "--no-sort-keys", "--indent=2"]
      - id: check-ast
      - id: check-builtin-literals
      - id: debug-statements
      - id: detect-private-key
      - id: mixed-line-ending
        args: ["--fix=lf"]
      - id: check-merge-conflict
      - id: check-case-conflict
      - id: check-added-large-files
        args: ["--maxkb=5000"]  # 5 MB
      - id: forbid-new-submodules

  # Validate pyproject.toml against the PEP 621 schema etc.
  - repo: https://github.com/abravalheri/validate-pyproject
    rev: v0.19
    hooks:
      - id: validate-pyproject

  # Spelling in Markdown, docs, and code comments
  - repo: https://github.com/codespell-project/codespell
    rev: v2.3.0
    hooks:
      - id: codespell
        args: ["-L", "nd,teh,aks,fo,stucture,colour"]  # add project-specific false-positives as needed
        additional_dependencies: []

  # Markdown formatting / linting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.41.0
    hooks:
      - id: markdownlint
        name: markdownlint (docs)
        args: ["--disable", "MD013"]  # disable long line rule (we use 100 cols in code; docs may vary)
        files: "\\.(md|MD)$"

  # Prettier for JSON/YAML/Markdown (stable formatting across envs)
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v3.3.3
    hooks:
      - id: prettier
        name: prettier (json|yaml|md)
        types_or: [json, yaml, markdown]

  # -----------------------------------
  # Security & compliance
  # -----------------------------------
  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.9
    hooks:
      - id: bandit
        name: bandit (security)
        args: ["-q", "-r", "world_engine"]
        files: "^world_engine/.*\\.py$"

  - repo: https://github.com/pypa/pip-audit
    rev: v2.7.3
    hooks:
      - id: pip-audit
        name: pip-audit (vuln scan)
        args: ["-r", "requirements.txt"]
        # If using Poetry only, consider switching to 'pip-audit -P' in CI with exported requirements.

  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.5.0
    hooks:
      - id: detect-secrets
        name: detect-secrets (heuristics)
        args: ["--baseline", ".secrets.baseline"]
        # Run `detect-secrets scan > .secrets.baseline` to bootstrap.

  # -----------------------------------
  # Docker & Shell QA
  # -----------------------------------
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint
        name: hadolint (Dockerfile)
        files: "(?i)^dockerfile$|Dockerfile(\\..*)?$"

  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.10.0.1
    hooks:
      - id: shellcheck
        name: shellcheck (sh)
        files: "\\.(sh|bash)$"

  # -----------------------------------
  # Conventional commits (optional but recommended)
  # -----------------------------------
  - repo: https://github.com/commitizen-tools/commitizen
    rev: v3.29.0
    hooks:
      - id: commitizen
        name: commitizen (conventional commits)
        stages: [commit-msg]
        additional_dependencies: ["commitizen"]

  # -----------------------------------
  # Local project-specific hooks
  # -----------------------------------
  - repo: local
    hooks:
      # Prevent accidental commits of heavy binaries outside DVC
      - id: forbid-large-binaries
        name: forbid-large-binaries (non-DVC)
        entry: bash -c 'git diff --cached --name-only | xargs -I{} bash -c "[ -f {} ] && [ $(wc -c < \"{}\") -gt 10485760 ] && echo \"Refusing >10MB file: {} (use DVC)\" && exit 1 || true"'
        language: system
        pass_filenames: false
        stages: [pre-commit]

      # Quick sanity of YAML in configs/ (explicit, fast fail)
      - id: check-configs
        name: check-configs (configs/*.yaml)
        entry: bash -c 'yamllint -d relaxed configs || (echo "YAML lint failed in configs/"; exit 1)'
        language: system
        pass_filenames: false
        additional_dependencies: []
        stages: [pre-commit]

      # Pre-push test gate (fast mode by default)
      - id: pytest-quick
        name: pytest (quick)
        entry: bash -c 'pytest -q -k "not slow" --maxfail=1'
        language: system
        pass_filenames: false
        stages: [push]

      # Optional: ensure DVC status is healthy before pushing
      - id: dvc-status
        name: dvc status (workspace clean)
        entry: bash -c 'command -v dvc >/dev/null 2>&1 && dvc status -q || true'
        language: system
        pass_filenames: false
        stages: [push]
